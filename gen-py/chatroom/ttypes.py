#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import user.ttypes

from thrift.transport import TTransport
all_structs = []


class Msg(object):
    """
    Attributes:
     - content
     - timestamp
     - fromUserId
     - toUserId
     - msgId
     - saveTime
     - clientInfo

    """


    def __init__(self, content=None, timestamp=None, fromUserId=None, toUserId=None, msgId=None, saveTime=None, clientInfo=None,):
        self.content = content
        self.timestamp = timestamp
        self.fromUserId = fromUserId
        self.toUserId = toUserId
        self.msgId = msgId
        self.saveTime = saveTime
        self.clientInfo = clientInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.content = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.timestamp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.fromUserId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.toUserId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.msgId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.saveTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.clientInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Msg')
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 1)
            oprot.writeString(self.content.encode('utf-8') if sys.version_info[0] == 2 else self.content)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I32, 2)
            oprot.writeI32(self.timestamp)
            oprot.writeFieldEnd()
        if self.fromUserId is not None:
            oprot.writeFieldBegin('fromUserId', TType.I32, 3)
            oprot.writeI32(self.fromUserId)
            oprot.writeFieldEnd()
        if self.toUserId is not None:
            oprot.writeFieldBegin('toUserId', TType.I32, 4)
            oprot.writeI32(self.toUserId)
            oprot.writeFieldEnd()
        if self.msgId is not None:
            oprot.writeFieldBegin('msgId', TType.I64, 5)
            oprot.writeI64(self.msgId)
            oprot.writeFieldEnd()
        if self.saveTime is not None:
            oprot.writeFieldBegin('saveTime', TType.I32, 6)
            oprot.writeI32(self.saveTime)
            oprot.writeFieldEnd()
        if self.clientInfo is not None:
            oprot.writeFieldBegin('clientInfo', TType.STRING, 7)
            oprot.writeString(self.clientInfo.encode('utf-8') if sys.version_info[0] == 2 else self.clientInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RMMsg(object):
    """
    Attributes:
     - content
     - timestamp
     - userId
     - chatroomId
     - msgId
     - saveTime
     - clientInfo

    """


    def __init__(self, content=None, timestamp=None, userId=None, chatroomId=None, msgId=None, saveTime=None, clientInfo=None,):
        self.content = content
        self.timestamp = timestamp
        self.userId = userId
        self.chatroomId = chatroomId
        self.msgId = msgId
        self.saveTime = saveTime
        self.clientInfo = clientInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.content = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.timestamp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.userId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.chatroomId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.msgId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.saveTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.clientInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RMMsg')
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 1)
            oprot.writeString(self.content.encode('utf-8') if sys.version_info[0] == 2 else self.content)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I32, 2)
            oprot.writeI32(self.timestamp)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.I32, 3)
            oprot.writeI32(self.userId)
            oprot.writeFieldEnd()
        if self.chatroomId is not None:
            oprot.writeFieldBegin('chatroomId', TType.I32, 4)
            oprot.writeI32(self.chatroomId)
            oprot.writeFieldEnd()
        if self.msgId is not None:
            oprot.writeFieldBegin('msgId', TType.I64, 5)
            oprot.writeI64(self.msgId)
            oprot.writeFieldEnd()
        if self.saveTime is not None:
            oprot.writeFieldBegin('saveTime', TType.I32, 6)
            oprot.writeI32(self.saveTime)
            oprot.writeFieldEnd()
        if self.clientInfo is not None:
            oprot.writeFieldBegin('clientInfo', TType.STRING, 7)
            oprot.writeString(self.clientInfo.encode('utf-8') if sys.version_info[0] == 2 else self.clientInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UniMsg(object):
    """
    Attributes:
     - user
     - room

    """


    def __init__(self, user=None, room=None,):
        self.user = user
        self.room = room

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.user = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Msg()
                        _elem5.read(iprot)
                        self.user.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.room = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = RMMsg()
                        _elem11.read(iprot)
                        self.room.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UniMsg')
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.user))
            for iter12 in self.user:
                iter12.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.room is not None:
            oprot.writeFieldBegin('room', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.room))
            for iter13 in self.room:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Room(object):
    """
    Attributes:
     - roomId
     - roomName
     - members
     - roomOwer
     - roomInfo
     - msgs

    """


    def __init__(self, roomId=None, roomName=None, members=None, roomOwer=None, roomInfo=None, msgs=None,):
        self.roomId = roomId
        self.roomName = roomName
        self.members = members
        self.roomOwer = roomOwer
        self.roomInfo = roomInfo
        self.msgs = msgs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.roomId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.roomName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.members = set()
                    (_etype17, _size14) = iprot.readSetBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readI32()
                        self.members.add(_elem19)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.roomOwer = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.roomInfo = RoomInfo()
                    self.roomInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.msgs = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = RMMsg()
                        _elem25.read(iprot)
                        self.msgs.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Room')
        if self.roomId is not None:
            oprot.writeFieldBegin('roomId', TType.I32, 1)
            oprot.writeI32(self.roomId)
            oprot.writeFieldEnd()
        if self.roomName is not None:
            oprot.writeFieldBegin('roomName', TType.STRING, 2)
            oprot.writeString(self.roomName.encode('utf-8') if sys.version_info[0] == 2 else self.roomName)
            oprot.writeFieldEnd()
        if self.members is not None:
            oprot.writeFieldBegin('members', TType.SET, 3)
            oprot.writeSetBegin(TType.I32, len(self.members))
            for iter26 in self.members:
                oprot.writeI32(iter26)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.roomOwer is not None:
            oprot.writeFieldBegin('roomOwer', TType.I32, 4)
            oprot.writeI32(self.roomOwer)
            oprot.writeFieldEnd()
        if self.roomInfo is not None:
            oprot.writeFieldBegin('roomInfo', TType.STRUCT, 5)
            self.roomInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.msgs is not None:
            oprot.writeFieldBegin('msgs', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.msgs))
            for iter27 in self.msgs:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RoomInfo(object):
    """
    Attributes:
     - creatTime
     - introduce

    """


    def __init__(self, creatTime=None, introduce=None,):
        self.creatTime = creatTime
        self.introduce = introduce

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.creatTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.introduce = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RoomInfo')
        if self.creatTime is not None:
            oprot.writeFieldBegin('creatTime', TType.I32, 1)
            oprot.writeI32(self.creatTime)
            oprot.writeFieldEnd()
        if self.introduce is not None:
            oprot.writeFieldBegin('introduce', TType.STRING, 2)
            oprot.writeString(self.introduce.encode('utf-8') if sys.version_info[0] == 2 else self.introduce)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChatroomOperationError(TException):
    """
    Attributes:
     - operation
     - reason

    """


    def __init__(self, operation=None, reason=None,):
        self.operation = operation
        self.reason = reason

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.operation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChatroomOperationError')
        if self.operation is not None:
            oprot.writeFieldBegin('operation', TType.STRING, 1)
            oprot.writeString(self.operation.encode('utf-8') if sys.version_info[0] == 2 else self.operation)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason.encode('utf-8') if sys.version_info[0] == 2 else self.reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Msg)
Msg.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'content', 'UTF8', None, ),  # 1
    (2, TType.I32, 'timestamp', None, None, ),  # 2
    (3, TType.I32, 'fromUserId', None, None, ),  # 3
    (4, TType.I32, 'toUserId', None, None, ),  # 4
    (5, TType.I64, 'msgId', None, None, ),  # 5
    (6, TType.I32, 'saveTime', None, None, ),  # 6
    (7, TType.STRING, 'clientInfo', 'UTF8', None, ),  # 7
)
all_structs.append(RMMsg)
RMMsg.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'content', 'UTF8', None, ),  # 1
    (2, TType.I32, 'timestamp', None, None, ),  # 2
    (3, TType.I32, 'userId', None, None, ),  # 3
    (4, TType.I32, 'chatroomId', None, None, ),  # 4
    (5, TType.I64, 'msgId', None, None, ),  # 5
    (6, TType.I32, 'saveTime', None, None, ),  # 6
    (7, TType.STRING, 'clientInfo', 'UTF8', None, ),  # 7
)
all_structs.append(UniMsg)
UniMsg.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'user', (TType.STRUCT, [Msg, None], False), None, ),  # 1
    (2, TType.LIST, 'room', (TType.STRUCT, [RMMsg, None], False), None, ),  # 2
)
all_structs.append(Room)
Room.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'roomId', None, None, ),  # 1
    (2, TType.STRING, 'roomName', 'UTF8', None, ),  # 2
    (3, TType.SET, 'members', (TType.I32, None, False), None, ),  # 3
    (4, TType.I32, 'roomOwer', None, None, ),  # 4
    (5, TType.STRUCT, 'roomInfo', [RoomInfo, None], None, ),  # 5
    (6, TType.LIST, 'msgs', (TType.STRUCT, [RMMsg, None], False), None, ),  # 6
)
all_structs.append(RoomInfo)
RoomInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'creatTime', None, None, ),  # 1
    (2, TType.STRING, 'introduce', 'UTF8', None, ),  # 2
)
all_structs.append(ChatroomOperationError)
ChatroomOperationError.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'operation', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'reason', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
